//
// LabelBlock.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Styles for label block */
public struct LabelBlock: Codable, JSONEncodable, Hashable {

    public var textAlign: LabelPosition?
    public var fontFamily: FontFamily?
    /** Height of line */
    public var lineHeight: Double?
    /** Font size */
    public var fontSize: Double?
    /** Font weight */
    public var fontWeight: Double?
    /** Color for text */
    public var color: String?
    /** Alternative color for text */
    public var alternativeColor: String?
    /** Background color for text block */
    public var backgroundColor: String?
    /** Padding left for container */
    public var paddingLeft: Double?
    /** Padding right for container */
    public var paddingRight: Double?
    /** Padding top for container */
    public var paddingTop: Double?
    /** Padding bottom for container */
    public var paddingBottom: Double?

    public init(textAlign: LabelPosition? = nil, fontFamily: FontFamily? = nil, lineHeight: Double? = nil, fontSize: Double? = nil, fontWeight: Double? = nil, color: String? = nil, alternativeColor: String? = nil, backgroundColor: String? = nil, paddingLeft: Double? = nil, paddingRight: Double? = nil, paddingTop: Double? = nil, paddingBottom: Double? = nil) {
        self.textAlign = textAlign
        self.fontFamily = fontFamily
        self.lineHeight = lineHeight
        self.fontSize = fontSize
        self.fontWeight = fontWeight
        self.color = color
        self.alternativeColor = alternativeColor
        self.backgroundColor = backgroundColor
        self.paddingLeft = paddingLeft
        self.paddingRight = paddingRight
        self.paddingTop = paddingTop
        self.paddingBottom = paddingBottom
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case textAlign
        case fontFamily
        case lineHeight
        case fontSize
        case fontWeight
        case color
        case alternativeColor
        case backgroundColor
        case paddingLeft
        case paddingRight
        case paddingTop
        case paddingBottom
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(textAlign, forKey: .textAlign)
        try container.encodeIfPresent(fontFamily, forKey: .fontFamily)
        try container.encodeIfPresent(lineHeight, forKey: .lineHeight)
        try container.encodeIfPresent(fontSize, forKey: .fontSize)
        try container.encodeIfPresent(fontWeight, forKey: .fontWeight)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(alternativeColor, forKey: .alternativeColor)
        try container.encodeIfPresent(backgroundColor, forKey: .backgroundColor)
        try container.encodeIfPresent(paddingLeft, forKey: .paddingLeft)
        try container.encodeIfPresent(paddingRight, forKey: .paddingRight)
        try container.encodeIfPresent(paddingTop, forKey: .paddingTop)
        try container.encodeIfPresent(paddingBottom, forKey: .paddingBottom)
    }
}


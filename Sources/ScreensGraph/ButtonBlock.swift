//
// ButtonBlock.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Styles for button */
public struct ButtonBlock: Codable, JSONEncodable, Hashable {

    public var visibility: ButtonVisibility?
    /** If true, the input will take up the full width of its container */
    public var fullWidth: Bool?
    /** Background of button */
    public var backgroundColor: String?
    /** Padding left for container */
    public var paddingLeft: Double?
    /** Padding right for container */
    public var paddingRight: Double?
    /** Padding top for container */
    public var paddingTop: Double?
    /** Padding bottom for container */
    public var paddingBottom: Double?
    /** Radius of border */
    public var borderRadius: Double?
    /** Color of border */
    public var borderColor: String?
    /** Width of border */
    public var borderWidth: Double?
    /** Width of button */
    public var width: Double?
    /** Height of button */
    public var height: Double?

    public init(visibility: ButtonVisibility? = nil, fullWidth: Bool? = nil, backgroundColor: String? = nil, paddingLeft: Double? = nil, paddingRight: Double? = nil, paddingTop: Double? = nil, paddingBottom: Double? = nil, borderRadius: Double? = nil, borderColor: String? = nil, borderWidth: Double? = nil, width: Double? = nil, height: Double? = nil) {
        self.visibility = visibility
        self.fullWidth = fullWidth
        self.backgroundColor = backgroundColor
        self.paddingLeft = paddingLeft
        self.paddingRight = paddingRight
        self.paddingTop = paddingTop
        self.paddingBottom = paddingBottom
        self.borderRadius = borderRadius
        self.borderColor = borderColor
        self.borderWidth = borderWidth
        self.width = width
        self.height = height
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case visibility
        case fullWidth
        case backgroundColor
        case paddingLeft
        case paddingRight
        case paddingTop
        case paddingBottom
        case borderRadius
        case borderColor
        case borderWidth
        case width
        case height
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(fullWidth, forKey: .fullWidth)
        try container.encodeIfPresent(backgroundColor, forKey: .backgroundColor)
        try container.encodeIfPresent(paddingLeft, forKey: .paddingLeft)
        try container.encodeIfPresent(paddingRight, forKey: .paddingRight)
        try container.encodeIfPresent(paddingTop, forKey: .paddingTop)
        try container.encodeIfPresent(paddingBottom, forKey: .paddingBottom)
        try container.encodeIfPresent(borderRadius, forKey: .borderRadius)
        try container.encodeIfPresent(borderColor, forKey: .borderColor)
        try container.encodeIfPresent(borderWidth, forKey: .borderWidth)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
    }
}


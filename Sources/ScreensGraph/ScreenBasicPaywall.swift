//
// ScreenBasicPaywall.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ScreenBasicPaywall: Codable, JSONEncodable, Hashable {

    public var navigationBar: PaywallNavigationBar
    public var footer: PaywallFooter
    public var styles: ScreenBasicPaywallBlock
    public var permission: RequestPermission?
    public var timer: ScreenTimer?
    public var animationEnabled: Bool
    public var useLocalAssetsIfAvailable: Bool
    public var screenBasicPaywall: String
    public var title: Text
    public var subtitle: Text
    public var divider: Divider?
    public var image: Image?
    public var video: Video?
    public var list: RegularList
    public var loader: Loader?
    /** Purchase flags */
    public var flags: [PurchaseFlag]
    public var subscriptions: SubscriptionList
    public var currencyFormat: CurrencyFormatKind

    public init(navigationBar: PaywallNavigationBar, footer: PaywallFooter, styles: ScreenBasicPaywallBlock, permission: RequestPermission?, timer: ScreenTimer?, animationEnabled: Bool, useLocalAssetsIfAvailable: Bool, screenBasicPaywall: String, title: Text, subtitle: Text, divider: Divider? = nil, image: Image? = nil, video: Video? = nil, list: RegularList, loader: Loader? = nil, flags: [PurchaseFlag], subscriptions: SubscriptionList, currencyFormat: CurrencyFormatKind) {
        self.navigationBar = navigationBar
        self.footer = footer
        self.styles = styles
        self.permission = permission
        self.timer = timer
        self.animationEnabled = animationEnabled
        self.useLocalAssetsIfAvailable = useLocalAssetsIfAvailable
        self.screenBasicPaywall = screenBasicPaywall
        self.title = title
        self.subtitle = subtitle
        self.divider = divider
        self.image = image
        self.video = video
        self.list = list
        self.loader = loader
        self.flags = flags
        self.subscriptions = subscriptions
        self.currencyFormat = currencyFormat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case navigationBar
        case footer
        case styles
        case permission
        case timer
        case animationEnabled
        case useLocalAssetsIfAvailable
        case screenBasicPaywall
        case title
        case subtitle
        case divider
        case image
        case video
        case list
        case loader
        case flags
        case subscriptions
        case currencyFormat
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(navigationBar, forKey: .navigationBar)
        try container.encode(footer, forKey: .footer)
        try container.encode(styles, forKey: .styles)
        try container.encode(permission, forKey: .permission)
        try container.encode(timer, forKey: .timer)
        try container.encode(animationEnabled, forKey: .animationEnabled)
        try container.encode(useLocalAssetsIfAvailable, forKey: .useLocalAssetsIfAvailable)
        try container.encode(screenBasicPaywall, forKey: .screenBasicPaywall)
        try container.encode(title, forKey: .title)
        try container.encode(subtitle, forKey: .subtitle)
        try container.encodeIfPresent(divider, forKey: .divider)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(video, forKey: .video)
        try container.encode(list, forKey: .list)
        try container.encodeIfPresent(loader, forKey: .loader)
        try container.encode(flags, forKey: .flags)
        try container.encode(subscriptions, forKey: .subscriptions)
        try container.encode(currencyFormat, forKey: .currencyFormat)
    }
}


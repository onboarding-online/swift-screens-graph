//
// PaywallFooter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Paywall footer */
public struct PaywallFooter: Codable, JSONEncodable, Hashable {

    public var paywallFooter: String
    public var purchase: Button?
    public var autoRenewLabel: Text?
    public var bottomContainer: PaywallFooterBottomContainer
    public var styles: PaywallFooterBlock
    public var button1: Button?
    public var button2: Button?
    public var kind: BasicFooterKind?

    public init(paywallFooter: String, purchase: Button? = nil, autoRenewLabel: Text? = nil, bottomContainer: PaywallFooterBottomContainer, styles: PaywallFooterBlock, button1: Button? = nil, button2: Button? = nil, kind: BasicFooterKind? = nil) {
        self.paywallFooter = paywallFooter
        self.purchase = purchase
        self.autoRenewLabel = autoRenewLabel
        self.bottomContainer = bottomContainer
        self.styles = styles
        self.button1 = button1
        self.button2 = button2
        self.kind = kind
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case paywallFooter
        case purchase
        case autoRenewLabel
        case bottomContainer
        case styles
        case button1
        case button2
        case kind
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(paywallFooter, forKey: .paywallFooter)
        try container.encodeIfPresent(purchase, forKey: .purchase)
        try container.encodeIfPresent(autoRenewLabel, forKey: .autoRenewLabel)
        try container.encode(bottomContainer, forKey: .bottomContainer)
        try container.encode(styles, forKey: .styles)
        try container.encodeIfPresent(button1, forKey: .button1)
        try container.encodeIfPresent(button2, forKey: .button2)
        try container.encodeIfPresent(kind, forKey: .kind)
    }
}


//
// ScreenStruct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Screen struct */
public enum ScreenStruct: Codable, JSONEncodable, Hashable {
    case typeCustomScreen(CustomScreen)
    case typeScreenImageTitleSubtitleList(ScreenImageTitleSubtitleList)
    case typeScreenImageTitleSubtitleMultipleSelectionList(ScreenImageTitleSubtitleMultipleSelectionList)
    case typeScreenImageTitleSubtitlePicker(ScreenImageTitleSubtitlePicker)
    case typeScreenImageTitleSubtitles(ScreenImageTitleSubtitles)
    case typeScreenProgressBarTitle(ScreenProgressBarTitle)
    case typeScreenSlider(ScreenSlider)
    case typeScreenTableMultipleSelection(ScreenTableMultipleSelection)
    case typeScreenTableSingleSelection(ScreenTableSingleSelection)
    case typeScreenTitleSubtitleCalendar(ScreenTitleSubtitleCalendar)
    case typeScreenTitleSubtitleField(ScreenTitleSubtitleField)
    case typeScreenTitleSubtitlePicker(ScreenTitleSubtitlePicker)
    case typeScreenTooltipPermissions(ScreenTooltipPermissions)
    case typeScreenTwoColumnMultipleSelection(ScreenTwoColumnMultipleSelection)
    case typeScreenTwoColumnSingleSelection(ScreenTwoColumnSingleSelection)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeCustomScreen(let value):
            try container.encode(value)
        case .typeScreenImageTitleSubtitleList(let value):
            try container.encode(value)
        case .typeScreenImageTitleSubtitleMultipleSelectionList(let value):
            try container.encode(value)
        case .typeScreenImageTitleSubtitlePicker(let value):
            try container.encode(value)
        case .typeScreenImageTitleSubtitles(let value):
            try container.encode(value)
        case .typeScreenProgressBarTitle(let value):
            try container.encode(value)
        case .typeScreenSlider(let value):
            try container.encode(value)
        case .typeScreenTableMultipleSelection(let value):
            try container.encode(value)
        case .typeScreenTableSingleSelection(let value):
            try container.encode(value)
        case .typeScreenTitleSubtitleCalendar(let value):
            try container.encode(value)
        case .typeScreenTitleSubtitleField(let value):
            try container.encode(value)
        case .typeScreenTitleSubtitlePicker(let value):
            try container.encode(value)
        case .typeScreenTooltipPermissions(let value):
            try container.encode(value)
        case .typeScreenTwoColumnMultipleSelection(let value):
            try container.encode(value)
        case .typeScreenTwoColumnSingleSelection(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(CustomScreen.self) {
            self = .typeCustomScreen(value)
        } else if let value = try? container.decode(ScreenImageTitleSubtitleList.self) {
            self = .typeScreenImageTitleSubtitleList(value)
        } else if let value = try? container.decode(ScreenImageTitleSubtitleMultipleSelectionList.self) {
            self = .typeScreenImageTitleSubtitleMultipleSelectionList(value)
        } else if let value = try? container.decode(ScreenImageTitleSubtitlePicker.self) {
            self = .typeScreenImageTitleSubtitlePicker(value)
        } else if let value = try? container.decode(ScreenImageTitleSubtitles.self) {
            self = .typeScreenImageTitleSubtitles(value)
        } else if let value = try? container.decode(ScreenProgressBarTitle.self) {
            self = .typeScreenProgressBarTitle(value)
        } else if let value = try? container.decode(ScreenSlider.self) {
            self = .typeScreenSlider(value)
        } else if let value = try? container.decode(ScreenTableMultipleSelection.self) {
            self = .typeScreenTableMultipleSelection(value)
        } else if let value = try? container.decode(ScreenTableSingleSelection.self) {
            self = .typeScreenTableSingleSelection(value)
        } else if let value = try? container.decode(ScreenTitleSubtitleCalendar.self) {
            self = .typeScreenTitleSubtitleCalendar(value)
        } else if let value = try? container.decode(ScreenTitleSubtitleField.self) {
            self = .typeScreenTitleSubtitleField(value)
        } else if let value = try? container.decode(ScreenTitleSubtitlePicker.self) {
            self = .typeScreenTitleSubtitlePicker(value)
        } else if let value = try? container.decode(ScreenTooltipPermissions.self) {
            self = .typeScreenTooltipPermissions(value)
        } else if let value = try? container.decode(ScreenTwoColumnMultipleSelection.self) {
            self = .typeScreenTwoColumnMultipleSelection(value)
        } else if let value = try? container.decode(ScreenTwoColumnSingleSelection.self) {
            self = .typeScreenTwoColumnSingleSelection(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of ScreenStruct"))
        }
    }
}

